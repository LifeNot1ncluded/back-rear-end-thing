from flask import Flask, request
import sqlite3

from sqlite3 import Error

app = Flask(__name__)  # Flask constructor
#create an object to create a window
window = Tk()

#Actions on Pressing Login Button
def login():
    def login_database():
        conn = sqlite3.connect("1.db")
        cur = conn.cursor()
        cur.execute("SELECT * FROM test WHERE email=? AND password=?",(e1.get(),e2.get()))
        row=cur.fetchall()
        conn.close()
        print(row)
        if row!=[]:
            user_name=row[0][1]
            l3.config(text="user name found with name: "+user_name)
        else:
            l3.config(text="user not found")

   
    l1 = Label(login_window,text="email: ",font="times 20")
    l1.grid(row=1,column=0)

    l2 = Label(login_window,text="Password: ",font="times 20")
    l2.grid(row=2,column=0)

    l3 = Label(login_window,font="times 20")
    l3.grid(row=5,column=1)

    #creating 2 adjacent text entries
    email_text = StringVar() #stores string
    e1 = Entry(login_window,textvariable=email_text)
    e1.grid(row=1,column=1)

    password_text = StringVar()
    e2 = Entry(login_window,textvariable=password_text,show='*')
    e2.grid(row=2,column=1)

    #create 1 button to login
    b = Button(login_window,text="login",width=20,command=login_database)
    b.grid(row=4,column=1)

    login_window.mainloop()

  execute_query(db_conn, create_query)

    return "Successfully created table"

@app.route('/InsertUSer', methods=['POST'])
def insert():
    db_conn = create_connection("Players.sqlite")
    body = request.json

    insert_query = f"""
INSERT INTO Players(username, password) 
VALUES ("{body['username']}", {body['password']}" )
"""
    execute_query(db_conn, insert_query)

    return "Signup Success"

@app.route('/login', methods=['GET', 'POST'])
def login():
    db_conn = create_connection("chat.sqlite")
    get_query = """SELECT * FROM Players"""
    cursor = execute_query(db_conn, get_query)
        
        conn.commit()  #save the changes 
        conn.close() #close the connection

    window.destroy()  #closes the previous window
    signup_window = Tk() #creates a new window for signup process
    signup_window.geometry("400x250") #dimensions for new window
    signup_window.title("Sign Up") #title for the window
    #create 3 Labels
    l1 = Label(signup_window,text="User Name: ",font="times 20")
    l1.grid(row=1,column=1)

    l2 = Label(signup_window,text="User email: ",font="times 20")
    l2.grid(row=2,column=1)

    l3 = Label(signup_window,text="Password: ",font="times 20")
    l3.grid(row=3,column=1)

    #create 3 adjacent text entries
    name_text = StringVar() #declaring string variable for storing name and password
    e1 = Entry(signup_window,textvariable=name_text)
    e1.grid(row=1,column=2)

    email_text = StringVar()
    e2 = Entry(signup_window,textvariable=email_text)
    e2.grid(row=2,column=2)

    password_text = StringVar()
    e3 = Entry(signup_window,textvariable=password_text,show='*')
    e3.grid(row=3,column=2)

    #create 1 button to signup
    b1 = Button(signup_window,text="signup",width=20,command=signup_database)
    b1.grid(row=4,column=2)

    signup_window.mainloop()


def execute_query(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print("Query executed successfully")

        return cursor
    except Error as e:
        print(f"The error '{e}' occurred")


@app.route('/')
def create():
    db_conn = create_connection("Players.sqlite")

    create_query = """
CREATE TABLE IF NOT EXISTS Players (
Username INTEGER PRIMARY KEY AUTOINCREMENT,
Password TEXT NOT NULL
);
"""

    execute_query(db_conn, create_query)

    return "Successfully created table"

@app.route('/InsertUSer', methods=['POST'])
def insert():
    db_conn = create_connection("Players.sqlite")
    body = request.json

    insert_query = f"""
INSERT INTO Players(username, password) 
VALUES ("{body['username']}", {body['password']}" )
"""
    execute_query(db_conn, insert_query)

    return "Signup Success"

@app.route('/login', methods=['GET', 'POST'])
def login():
    db_conn = create_connection("chat.sqlite")
    get_query = """SELECT * FROM Players"""
    cursor = execute_query(db_conn, get_query)

    if request.method == 'POST':
        if request.form['username'] != get_query['username'] or request.form['password'] != get_query["password"]:
            return "Invalid username/password, please try again"
        else:
            return "logged in succesfully"
